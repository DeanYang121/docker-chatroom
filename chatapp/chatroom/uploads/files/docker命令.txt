systemctl status docker
systemctl start docker
systemctl enable docker 开机自启动
systemctl disable docker 取消开机自启动

firewall-cmd --state 查看防火墙状态

docker images 查看镜像列表
docker search 
docker pull
docker images
docker rmi 删除镜像

docker run --name -h hostname
docker stop CONTAINER ID
docker ps -a -l 查看容器
docker exec 执行命令|docker attach 单用户模式，进入容器，退出将会关闭bash,一般不用|nsenter
docker rm 删除容器

docker run centos /bin/echo "hello" 运行容器，并执行一个命令

docker run --name mydockers -t -i centos /bin/bash  进入bash

docker start mydockers
docker ps -a 获取docker的pid
docker instpect -f "{{ .State.Pid }}" mydockers
5383
nsenter -t 5383 -m -u -i -n -p 进入docker
可以写脚本通过docker镜像的名字，获取id值，进入docker

docker run --rm centos /bin/echo "hehe" --rm使用完容器之后将会删除容器
docker load < nginx.tar 导入容器
docker images 查看是否导入成功

nginx运行在docker容器的前台？
docker run -d nginx -d:daemon的模式运行

docker logs dockerid 查看docker的日志

查看网关映射：
brctl show

docker ps
docker images
docker run -d -P nginx -P端口映射
进入容器查看容器的ip地址：
ip ad li

docker run -d -p 192.168.26.11:81:80 --name mynginx nginx 将物理机的81端口映射到docker内部的80端口

docker port mynginx 查看docker映射

docker run -d -p 443:443 -p 82:80 --name nginxv2
docker port nginxv2

docker数据管理：
数据卷        数据卷容器
-v /data      --volumes-from
-v src:dst

底层使用的aufs实现的数据卷挂在

docker run -d --name nginx-volumes-test -v /data nginx
进入docker容器中：查看/data目录下文件  执行mount命令

docker inspect -f {{ .Mount }} nginx-volume-test1 查看挂载目录

指定挂载目录：
mkdir -p /data/docker-volume-nginx

docker run -d --name nginx-volumn-test2 -v /data/docker-volume-nginx:/data nginx

进入docker查看 data目录

使用数据卷容器:
docker run -it --name volume-test3 --volumes-from nginx-volumn-test2 centos /bin/bash
查看data目录

docker run --rm -it --volumes-from nfs-test centos /bin/bash

dockerfile自动构建镜像：
docker ps -a -q 查看所有容器的id
docker kill $(docker ps -a -q) 杀死所有容器
docker rm $(docker ps -a -q) 删除所有容器

手动创建镜像：
docker run --name mynginx -it centos
进入镜像
rpm -ivh yum源  装epel源

yum install -y nginx

修改为前台启动
vim /etc/nginx/nginx.conf

daemon--->off;
退出容器bash，执行查看
docker ps -a
docker commit -m "My Nginx" dockerId oldboy/mynginx:v1

docker images
docker run --name mynginxv1 -d -p 81:80 oldboy/mynginx:v1 nginx

#####使用dockerfile实现镜像创建：
#This Dockerfile

#Base image
FROM centos

#Maintainer
MAINTAINER dean.yang deanyang1996@126.com

#Commands
RUN rpm -ivh epel源 不要引号
RUN yum install -y nginx && yum clean all
RUN echo "daemon off;">>/etc/nginx/nginx.conf
ADD index.html /usr/share/nginx/html/index.html
EXPOSE 80
CMD ["nginx"]

echo "nginx in docker ,haha" > index.html
index.html和dockerfile在同一个目录下面

docker build -t mynginx:v2 .  有个点最好？
docker images 查看镜像列表
docker run --name mynginxv2 -d -p 82:80 mynginxv2

dockerfile的格式：
FROM 指定基础镜像
MAINTAINER 指定维护者信息
RUN 在命令前面加上RUN即可
ADD COPY文件，会自动解压
WORKDIR 设置当前的工作目录
VOLUME 设置卷，挂在主机目录
EXPOSE 指定对外端口
CMD 指定容器启动后的要干的事情  每个dockerfile只能有一个cmd

ENTRYPOINT command param1 param2 （shell中执行） 一个dockerfile只能有一个
可以和cmd同时使用

USER daemon 指定运行容器时的用户名和UID，后续的RUN指令也会使用这个指定的用户
EXPOSE 设置docker容器内部暴露的端口号，如果需要外部访问，还需要启动容器时增加-p或者-P参数进行配置

ENV <key>=<value>
设置环境变量，可以在RUN之前使用，然后RUN命令时调用，容器启动时这些环境变量会被指定

ADD <src>...<dest>
ADD ["src",..."dest"]
将指定的<src>复制到容器文件系统中的<dest>
所有拷贝到container中的文件和文件夹权限为0755，uid和gid为0
如果文件是可识别的压缩格式，则docker会自动解压缩

volumn
volumn ["/data"]
将本地文件夹或者其他container的文件夹挂载到container中

WORKDRIR
WORKDIR/path/to/workdir
解释：切换目录，为后续的命令指定工作目录
可使用多个workdir指令，后续命令参数是相对路径，则会基于之前命令指定的路径
WORKDIR /a
WORKDIR b
WORKDIR c
RUN PWD
/a/b/c

ONBUILD
指定的命令在构建镜像时并不执行，而是在它的子镜像中执行

ARG
ARG<name>[=<default value>]
指定一个变量在docker build的时候使用，可以使用--build-arg <varname>=<value>来指定参数的值，不过如果构建的时候不指定就会报错


按照生产级别来生成一个docker镜像，分层设计仓库
mkdir docker
cd docker
mkdir system
mkdir runtime
mkdir app
cd  system
mkdir centos
mkdir unbuntu
mkdir centos-ssh
cd ..
cd runtime
mkdir java
mkdir python
cd ..
cd app
mkdir xxx-admin
mkdir xxx-api
cd ..

生产场景下安装CentOs镜像：
#docker for CentOS

#Base images
FROM centos

#Who
MAINTAINER dean.yang deanyang1996@126.com

#EPEL
ADD epel.repo /etc/yum.repos.d/

#Base pkg
RUN yum install -y wget supervisor git tree net-tools sudo pasmisc && yum clean all

docker build -t oldboy/centos:base .

#装上python 一般生产环境还需要
#Base image 
FROM oldboy/centos:base

#Maintainer
MAINTAINER dean.yang deanyang1996@126.com

#Python env
RUN yum install -y python-devel python-pip supervisor

#Upgrade pip
RUN pip install --upgrade pip

docker build oldboy/python .

创建一个一个带有ssh的centos
#Docker for CentOS

#Base image
FROM centos

#who
MAINTAINER dean.yang deanyang1996@126.com

#EPEL
ADD epel.repo /etc/yum.repos.d/

#Base pkg
RUN yum install -y openssh-clients openssl-devel openssh-server wget mysql-devel supervisor git redis tree net-tools sudo psmic && yum clean all

#For SSHD
RUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key
RUN ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key
RUN echo "root:deanyang" | chpasswd

docker build -t oldboy/centos-ssh .

继续安装python：
#Base images
FROM oldboy/centos-ssh

#Maintainer
MAINTAINER dean.yang deanyang1996@126.com

#Python env
RUN yum install -y python-devel python-pip supervisor

#Upgrade pip
RUN pip install --upgrade pip

构建一个python-ssh：
docker build -t oldboy/python-ssh .


vim requirements.txt
在shop-api下面建立一个dockerfile，所以每个dockerfile都要放在他所在分类的目录下面，然后build镜像
#Base image
FROM oldboy/python-ssh

#Maintainer
Maintainer dean.yang deanyang1996@126.com

#python ENV
RUN useradd -s /sbin/nologin -M www

#ADD file 
ADD app.py /opt/app.py
ADD requirements.txt /opt/
ADD supervisord.conf /etc/supervisord.conf
ADD app-supervisor.ini /etc/supervisord.d/

#Upgrade pip
RUN /usr/bin/pip2.7 install -r /opt/requirements

#Port
EXPOSE 22 5000

#CMD
CMD ["/usr/bin/supervisord","-c","/etc/supervisord.conf"]
需要将supervisor.conf中的nodaemon=true改为False 才能使用CMD启动supervisor



